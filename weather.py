import requests
from datetime import datetime, timezone, timedelta
import json



####################################################       –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞      ####################


with open("config.json") as config_file:
    config = json.load(config_file)

WEATHER_API_KEY = config["WEATHER_API_KEY"]



BASE_URL = "https://api.openweathermap.org/data/3.0/onecall"


def get_weather_forecast(lat, lon, date=None):
    def format_weather_data(weather_data):
        result = ""
        for entry in weather_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ –¥–∞—Ç—É –≤ UTC
            dt = datetime.fromtimestamp(entry['dt'], timezone.utc)
            date_str = dt.strftime('%d.%m.%Y %H:%M')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            temperature = entry['main']['temp']
            feels_like = entry['main']['feels_like']
            pressure = entry['main']['pressure']
            humidity = entry['main']['humidity']
            weather_description = entry['weather'][0]['description'].capitalize()
            wind_speed = entry['wind']['speed']
            clouds = entry['clouds']['all']

            # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            result += (
                f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* `{date_str}`\n"
                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* `{temperature}¬∞C` (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ `{feels_like}¬∞C`)\n"
                f"üå§Ô∏è *–ü–æ–≥–æ–¥–∞:* `{weather_description}`\n"
                f"üí® *–í–µ—Ç–µ—Ä:* `{wind_speed} –º/—Å`\n"
                f"üå´Ô∏è *–û–±–ª–∞—á–Ω–æ—Å—Ç—å:* `{clouds}%`\n"
                f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* `{humidity}%`\n"
                f"üîΩ *–î–∞–≤–ª–µ–Ω–∏–µ:* `{pressure} –≥–ü–∞`\n"
                f"{'-' * 20}\n"
            )
        return result

    url = "http://api.openweathermap.org/data/2.5/forecast"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": WEATHER_API_KEY,
        "units": "metric",
        "lang": "ru"
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {response.status_code}"

    try:
        data = response.json()
        forecasts = data.get("list", [])

        if not forecasts:
            return "–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        six_hour_forecasts = [f for i, f in enumerate(forecasts) if i % 2 == 0]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 2-–π –ø—Ä–æ–≥–Ω–æ–∑ (6 —á–∞—Å–æ–≤)

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        if not date:
            today = datetime.now().strftime('%Y-%m-%d')
            tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
            filtered_forecasts = [f for f in six_hour_forecasts if today in f["dt_txt"] or tomorrow in f["dt_txt"]]
            return format_weather_data(filtered_forecasts)

        # –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        forecast = [f for f in six_hour_forecasts if date in f["dt_txt"]]
        if not forecast:
            return f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        return format_weather_data(forecast)

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"



"""
# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
lat = 55.7558  # –ú–æ—Å–∫–≤–∞
lon = 37.6176
date = "2024-12-09"  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2 –¥–µ–∫–∞–±—Ä—è
print(get_weather_forecast(lat, lon, date))
print(get_weather_forecast(lat, lon))
"""