import json
import sys
import os
import asyncio
import logging
from random import choice
from datetime import datetime

from aiogram import BaseMiddleware
from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.filters import StateFilter
from aiogram import Router


from two_gis_API import search_for_cafe_ver_2
from browser import get_good_route
from two_gis_API import generate_map_link
from giga_chat_API import prompt_processing
from giga_chat_API import slovarik
from weather import get_weather_forecast
from recomendations import get_recommendations

#####################################################       –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞      ####################


with open("config.json", "r", encoding="utf-8") as config_file:
    config = json.load(config_file)
with open("phrases.json", "r", encoding="utf-8") as phrases_file:
    phrases = json.load(phrases_file)

TOKEN = config["TELEGRAM_TOKEN"]

####################################################        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ         ########################################


class Logger:
    def __init__(self, file_path):
        self.terminal = sys.stdout

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(file_path):
            with open(file_path, 'w'): pass  # –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        self.log = open(file_path, "a")

    def write(self, message):
        self.terminal.write(message)  # –ü–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
        self.log.write(message)  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª

    def flush(self):
        self.terminal.flush()
        self.log.flush()


# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout
sys.stdout = Logger("log.txt")


######################################################      –ë–æ—Ç–æ–≤–æ–¥—Å—Ç–≤–æ     ############################################


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –ø–∞–º—è—Ç—å—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

router = Router()
dp.include_router(router)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class PointForm(StatesGroup):
    start_point = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    intermediate_points = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
    end_point = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏


class PromptStates(StatesGroup):
    waiting_for_start = State()
    waiting_for_prompt = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_start_point = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    waiting_for_end_point = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
    waiting_for_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    waiting_for_metro = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ
    waiting_for_area = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
    waiting_for_eat = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ñ–µ
    waiting_for_cafe_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ
    waiting_for_weather = State()   #–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç
    waiting_for_recommendations = State()   #–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç




# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_tasks = {}


# Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á. –û–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ –±—ã cancel –Ω–µ –∑–∞—á–∏—Ç—ã–≤–∞–ª—Å—è –∑–∞ –ø—Ä–æ–º–ø—Ç
class TaskManagerMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        user_id = event.from_user.id

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if task := active_tasks.get(user_id):
            task.cancel()
            del active_tasks[user_id]

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        loop = asyncio.get_event_loop()
        task = loop.create_task(handler(event, data))
        active_tasks[user_id] = task

        try:
            return await task
        except asyncio.CancelledError:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —ç—Ç–æ –∑–¥–µ—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            pass
        finally:
            # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            active_tasks.pop(user_id, None)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Middleware
dp.message.middleware(TaskManagerMiddleware())


# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    user_name = message.from_user.username
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É. –ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å: –∫—É–¥–∞ –ø–æ–π—Ç–∏, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∏–ª–∏ –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ –∏—â–µ—à—å. –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—ã –¥–∞—à—å —Å—Ä–∞–∑—É, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∏—Ç, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—à—É!\n\n"
        f"‚ú® –ß—Ç–æ —è —É–º–µ—é?\n"
        f"- –ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏: –ø–∞—Ä–∫–∏, –º—É–∑–µ–∏, —É—é—Ç–Ω—ã–µ –∫–∞—Ñ–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
        f"- –°–æ—Å—Ç–∞–≤–ª—é –º–∞—Ä—à—Ä—É—Ç —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.\n"
        f"- –†–∞—Å—Å–∫–∞–∂—É –æ –ø–æ–≥–æ–¥–µ –≤ —Ä–∞–π–æ–Ω–µ –ø—Ä–æ–≥—É–ª–∫–∏.\n"
        f"- –ï—Å–ª–∏ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —è —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª —Ç–æ—á–Ω—ã–º.\n\n"
        f"‚úÖ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏ –∏–ª–∏ —á—Ç–æ –∏—â–µ—à—å, –∏ –º—ã –Ω–∞—á–Ω—ë–º!"
        "\n\n"
        f"–ù–∞—á–Ω—ë–º? üåø\n"
        f"–í—ã—Ö–æ–≤–∏ get_walk —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—É–ª–∫—É, –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É "
    )

    def create_start_keyboard():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É üåø", callback_data="get_walk")]
        ])
        return keyboard

    keyboard = create_start_keyboard()
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(PromptStates.waiting_for_start)


@router.callback_query(StateFilter(PromptStates.waiting_for_start))
async def handle_walk_start(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "get_walk":
        await callback_query.message.answer(
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–≥—É–ª–∫–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è? –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º –ª—É—á—à–µ! ‚ú®üåç\n(–ù–∞–ø—Ä–∏–º–µ—Ä: –≥–¥–µ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫–∏–µ –º–µ—Å—Ç–∞ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –≥–¥–µ –±—ã –≤—ã –ø–µ—Ä–µ–∫—É—Å–∏–ª–∏ –∏ —Ç. –¥.)")
        await state.set_state(PromptStates.waiting_for_prompt)





@dp.message(Command("start"), F.chat.type.in_({"group", "supergroup"}))
async def start_command_in_group(message: Message):
    bot_username = (await bot.get_me()).username
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if message.text == "/start" or message.text == f"/start@{bot_username}":
        await message.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ!")





@dp.message(Command("cancel"))         # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π, –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
async def cancel_handler(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    await state.clear()
    await message.answer("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –í—ã–∑–æ–≤–∏ start, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞!")





# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /prompt
@dp.message(Command("get_walk"))
async def handle_prompt_command(message: Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–≥—É–ª–∫–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è? –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º –ª—É—á—à–µ! ‚ú®üåç\n(–ù–∞–ø—Ä–∏–º–µ—Ä: –≥–¥–µ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫–∏–µ –º–µ—Å—Ç–∞ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –≥–¥–µ –±—ã –≤—ã –ø–µ—Ä–µ–∫—É—Å–∏–ª–∏ –∏ —Ç. –¥.)")
    await state.set_state(PromptStates.waiting_for_prompt)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
@dp.message(PromptStates.waiting_for_prompt)
async def handle_prompt_input(message: Message, state: FSMContext):
    prompt_text = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç
    print(f"\n{prompt_text}\n")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
    d = prompt_processing(prompt_text, "base", "base")
    print(f"\n{d}\n")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
    d = slovarik(d)
    await state.update_data(prompt_data=d)


    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    await request_next_info(d, message, state)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def request_next_info(data, message: Message, state: FSMContext):
    prompts = {
        "–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞": (
            PromptStates.waiting_for_start_point,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É.",
        ),
        "–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞": (
            PromptStates.waiting_for_end_point,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É.",
        ),
        "–≥–¥–µ –ø–æ–µ—Å—Ç—å": (
            PromptStates.waiting_for_eat,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–µ—Å—Ç—å.",
        ),
        "–≤—Ä–µ–º—è": (PromptStates.waiting_for_time, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è."),
        "–º–µ—Ç—Ä–æ": (
            PromptStates.waiting_for_metro,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ.",
        ),
        "—Ä–∞–π–æ–Ω": (PromptStates.waiting_for_area, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω."),
    }

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è prompts —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
    def update_prompts(phrases):
        for key1 in prompts:
            state, _ = prompts[key1]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            random_phrase = choice(phrases[key1])  # –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ JSON
            prompts[key1] = (state, random_phrase)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –∏–∑ JSON –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ prompts
    update_prompts(phrases)

    # –¢–µ–ø–µ—Ä—å prompts —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    print(prompts)

    for key, (next_state, prompt_message) in prompts.items():
        if data.get(key) == "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            await message.answer(prompt_message)
            await state.set_state(next_state)
            return

    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ñ–µ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±–æ—Ä –∫–∞—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if "–≥–¥–µ –ø–æ–µ—Å—Ç—å" in data and data["–≥–¥–µ –ø–æ–µ—Å—Ç—å"] != "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
        await offer_cafes(message, state)



# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π `prompt_processing`
async def handle_info_update(message: Message, state: FSMContext, key: str):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è `prompt_processing` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª—é—á–∞
    processing_params = {
        "–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞": ("additional", "start"),
        "–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞": ("additional", "end"),
        "–≥–¥–µ –ø–æ–µ—Å—Ç—å": ("additional", "cafe"),
        "–≤—Ä–µ–º—è": ("additional", "time"),
        "–º–µ—Ç—Ä–æ": ("additional", "metro"),
        "—Ä–∞–π–æ–Ω": ("additional", "area"),
    }

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ `prompt_processing`
    mode, detail = processing_params.get(key, ("additional", "default"))

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    processed_data = prompt_processing(message.text, mode, detail)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    user_data = await state.get_data()
    prompt_data = user_data["prompt_data"]
    prompt_data[key] = processed_data

    await state.update_data(prompt_data=prompt_data)


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ
    await request_next_info(prompt_data, message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def offer_cafes(message: Message, state: FSMContext):
    user_data = await state.get_data()
    prompt_data = user_data["prompt_data"]
    cafe_type = prompt_data["–≥–¥–µ –ø–æ–µ—Å—Ç—å"]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–∞—Ñ–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    points = [point.strip() for point in prompt_data["–º–µ—Å—Ç–æ"].split(";") if point.strip()]
    """
    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
    split(";") ‚Äî –†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ ;.
    point.strip() ‚Äî –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    if point.strip() ‚Äî –ò—Å–∫–ª—é—á–∞–µ—Ç –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–∑-–∑–∞ –ª–∏—à–Ω–µ–≥–æ ; —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞).
    """
    print(points)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ –≤–æ–∫—Ä—É–≥ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
    cafes, cashed_cordinates, polygon_string = search_for_cafe_ver_2(cafe_type, points)
    print(cafes)
    print(cashed_cordinates)
    print(polygon_string)


    await state.update_data(cached_cafes=cafes)
    await state.update_data(cashed_cordinates=cashed_cordinates)
    await state.update_data(cached_polygon=polygon_string)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∫–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    if not cafes:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ñ–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        await state.set_state(PromptStates.waiting_for_recommendations)
        await send_next_recommendation(message, state)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ñ–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_keyboard = []

    for cafe in cafes:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ñ–µ
        reviews_text = (
            f"–û—Ç–∑—ã–≤—ã: {cafe['reviews']['general_review_count']} "
            f"(—Ä–µ–π—Ç–∏–Ω–≥: {cafe['reviews']['general_rating']})"
        )
        cafe_info = (
            f"üè† {cafe['name']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {cafe['address_name']}\n"
            f"‚≠ê {reviews_text}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞—Ñ–µ
        cafe_button = InlineKeyboardButton(
            text=f"{cafe['name']} - {cafe['reviews']['general_rating']}‚≠ê",
            callback_data=f"choose_cafe:{cafe['id']}",
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        inline_keyboard.append([cafe_button])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(cafe_info)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ:", reply_markup=keyboard)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ
    await state.set_state(PromptStates.waiting_for_cafe_choice)





# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ
@router.callback_query(
    StateFilter(PromptStates.waiting_for_cafe_choice),
    lambda c: c.data.startswith("choose_cafe")
)
async def handle_cafe_choice(callback_query: CallbackQuery, state: FSMContext):
    cafe_id = callback_query.data.split(":")[1]
    user_data = await state.get_data()
    prompt_data = user_data["prompt_data"]
    print(prompt_data)
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—Ñ–µ –ø–æ id –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ "–º–µ—Å—Ç–∞"
    cafes = user_data["cached_cafes"]
    print(cafes)
    selected_cafe = next((cafe for cafe in cafes if cafe["id"] == cafe_id), None)
    print(selected_cafe)

    if selected_cafe:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—Ñ–µ –≤ —Å–ø–∏—Å–æ–∫ "–º–µ—Å—Ç–∞"
        if "–º–µ—Å—Ç–æ" in prompt_data:
            prompt_data["–º–µ—Å—Ç–æ"] += f";{selected_cafe['address_name']}"
        else:
            prompt_data["–º–µ—Å—Ç–æ"] = selected_cafe['address_name']
            print(prompt_data)
        await state.update_data(prompt_data=prompt_data)
        print(prompt_data)

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ñ–µ
        await callback_query.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ñ–µ: {selected_cafe['name']}. –û–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–∞—Ä—à—Ä—É—Ç."
        )


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
        if '–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞' in prompt_data and '–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞' in prompt_data:
            await state.set_state(PromptStates.waiting_for_weather)
            await send_weather_chose(callback_query.message, state)
        else:
            await request_next_info(prompt_data, callback_query.message, state)






@dp.message(PromptStates.waiting_for_weather)
async def send_weather_chose(entity, state: FSMContext):
    user_data = await state.get_data()
    coordinates = user_data["cashed_cordinates"]
    date = datetime.now().strftime("%Y-%m-%d")
    def create_weather_keyboard():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í –ø–æ–º–µ—â–µ–Ω–∏–∏", callback_data="weather_yes"),
             InlineKeyboardButton(text="–ù–∞ —É–ª–∏—Ü–µ", callback_data="weather_no")]
        ])
        return keyboard

    avg_lat = sum(lat for lat, lon in coordinates) / len(coordinates)
    avg_lon = sum(lon for lat, lon in coordinates) / len(coordinates)
    date = str(datetime.now().strftime("%Y-%m-%d"))
    weather = str(get_weather_forecast(avg_lat, avg_lon, date))

    text = (
        "üå¶Ô∏è –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã:\n\n"
        f"{weather}\n"
        "–†–µ—à–∏, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è ‚Äî –≤ –ø–æ–º–µ—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ —É–ª–∏—Ü—É! üòä"
    )
    keyboard = create_weather_keyboard()
    await entity.answer(text, reply_markup=keyboard, parse_mode="Markdown")



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–≥–æ–¥—ã
@router.callback_query(
    StateFilter(PromptStates.waiting_for_weather),
    F.data.in_(["weather_yes", "weather_no"])
)
async def handle_weather_choice(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "weather_yes":
        await state.update_data(weather=False)
        await callback_query.answer("–ü–æ–≥–æ–¥–∞ —É—á—Ç–µ–Ω–∞")
        await callback_query.message.answer("–ü–æ–≥–æ–¥–∞ —É—á—Ç–µ–Ω–∞")
        await state.set_state(PromptStates.waiting_for_recommendations)
        await send_next_recommendation(callback_query.message, state)



    elif callback_query.data == "weather_no":
        await state.update_data(weather=True)
        await callback_query.answer("–ü–æ–≥–æ–¥–∞ —É—á—Ç–µ–Ω–∞")
        await callback_query.message.answer("–ü–æ–≥–æ–¥–∞ —É—á—Ç–µ–Ω–∞")
        await state.set_state(PromptStates.waiting_for_recommendations)
        await send_next_recommendation(callback_query.message, state)








"""# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
recommendations = [
    {"coords": (55.7558, 37.6176), "address": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1",
     "description": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å - —Å–µ—Ä–¥—Ü–µ –ú–æ—Å–∫–≤—ã –∏ –∑–Ω–∞–∫–æ–≤–æ–µ –º–µ—Å—Ç–æ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ–∫—Ä—É–∂–∞—é—Ç –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ö—Ä–µ–º–ª—å –∏ –°–æ–±–æ—Ä –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ. –ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–∂–Ω–µ–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å—Ç—Ä–∞–Ω—ã."},
    {"coords": (55.7520, 37.6167), "address": "–ì–£–ú",
     "description": "–ì–£–ú - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä–º–∞–≥, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Å—Ç–∏–ª–µ–º, —Ä–æ—Å–∫–æ—à–Ω—ã–º–∏ –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π —Å—Ç–∞—Ä–æ–π –ú–æ—Å–∫–≤—ã. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–∞–∫ –±—Ä–µ–Ω–¥–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã, —Ç–∞–∫ –∏ —É—é—Ç–Ω—ã–µ –∫–∞—Ñ–µ."},
    {"coords": (55.7539, 37.6208), "address": "–°–æ–±–æ—Ä –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ",
     "description": "–°–æ–±–æ—Ä –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ - —Å–∏–º–≤–æ–ª –ú–æ—Å–∫–≤—ã, –ø–æ—Ä–∞–∂–∞—é—â–∏–π —Å–≤–æ–∏–º–∏ —è—Ä–∫–∏–º–∏ –∫—É–ø–æ–ª–∞–º–∏, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç—å—é. –≠—Ç–æ –º–µ—Å—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –∫—É–ª—å—Ç—É—Ä–æ–π –†–æ—Å—Å–∏–∏."},
    {"coords": (55.7506, 37.6096), "address": "–ó–∞—Ä—è–¥—å–µ",
     "description": "–ó–∞—Ä—è–¥—å–µ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–∫ —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º–∏, –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–º –∑–∞–ª–æ–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–º –º–æ—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–≤–∏—Å–∞–µ—Ç –Ω–∞–¥ –ú–æ—Å–∫–≤–æ–π-—Ä–µ–∫–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –≤–∏–¥."},
    {"coords": (55.7602, 37.6184), "address": "–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä",
     "description": "–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–Ω—ã—Ö –∏ –±–∞–ª–µ—Ç–Ω—ã—Ö —Ç–µ–∞—Ç—Ä–æ–≤ –º–∏—Ä–∞, –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —Å–≤–æ–µ–π —Ä–æ—Å–∫–æ—à–Ω–æ–π —Å—Ü–µ–Ω–æ–π, –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –≤—ã–¥–∞—é—â–∏–º–∏—Å—è —Å–ø–µ–∫—Ç–∞–∫–ª—è–º–∏."}
]"""



"""@dp.message(Command("rec"))
async def aaaa(message, state: FSMContext):
    await state.set_state(PromptStates.waiting_for_recommendations)
    await send_next_recommendation(message, state)"""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

@dp.message(PromptStates.waiting_for_recommendations)
async def send_next_recommendation(entity, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get("current_index", 0)
    recommendations = user_data.get("recommendations", None)

    if recommendations is None:  # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        polygon_string = user_data["cached_polygon"]  # –ü–æ–ª—É—á–∞–µ–º cached_polygon –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recommendations = get_recommendations(polygon_string)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await state.update_data(recommendations=recommendations)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    print(user_data)
    print(recommendations)

    def create_recommendation_keyboard():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å‚úÖ", callback_data="add"),
             InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è‚è≠", callback_data="next")],
            [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Äüîö", callback_data="finish")]
        ])
        return keyboard

    if current_index < len(recommendations):
        recommendation = recommendations[current_index]
        text = (
            f"üìç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**:\n\n"
            f"‚ú® **{recommendation['name']}**\n\n"
            f"üè† –û–ø–∏—Å–∞–Ω–∏–µ: **{recommendation['description']}**\n"
            f"üìå –ê–¥—Ä–µ—Å: {recommendation['address']}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º URL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if recommendation.get("url") and recommendation["url"].strip():
            text += f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–°—Å—ã–ª–∫–∞]({recommendation['url']})\n"
        keyboard = create_recommendation_keyboard()
        await entity.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        current_index += 1
        await state.update_data(current_index=current_index)
    else:
        await entity.answer("–õ–∏–±–æ —è –µ—â–µ –Ω–µ –∑–Ω–∞—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –≤ —Ä–∞–π–æ–Ω–µ –≤–∞—à–µ–π –ø—Ä–æ–≥—É–ª–∫–∏, –ª–∏–±–æ –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
                            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä')")

        return





# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@router.callback_query(
    StateFilter(PromptStates.waiting_for_recommendations),
    F.data.in_(["add", "next", "finish"])
)
async def handle_recommendation_choice(callback_query: CallbackQuery, state: FSMContext):
    # –°—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    rec_data = user_data.get("recomendation_cords", "")
    current_index = user_data.get("current_index", 0)
    recommendations = user_data.get("recommendations", None)

    print(user_data)

    if callback_query.data == "add":
        added = recommendations[current_index - 1]['coords']
        rec_data += f";{added}"
        await state.update_data(recomendation_cords=rec_data)
        await callback_query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
        await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
        await send_next_recommendation(callback_query.message, state)

    elif callback_query.data == "next":
        await callback_query.answer("–°–ª–µ–¥—É—é—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!")
        await callback_query.message.answer("–°–ª–µ–¥—É—é—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!")
        await send_next_recommendation(callback_query.message, state)

    elif callback_query.data == "finish":
        await callback_query.answer("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä!")
        await callback_query.message.answer("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–±–æ—Ä!")
        await finish_process(callback_query.message, state)


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ `handle_info_update` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(PromptStates.waiting_for_start_point)
async def handle_start_point(message: Message, state: FSMContext):
    await handle_info_update(message, state, "–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞")


@dp.message(PromptStates.waiting_for_end_point)
async def handle_end_point(message: Message, state: FSMContext):
    await handle_info_update(message, state, "–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞")


@dp.message(PromptStates.waiting_for_time)
async def handle_time(message: Message, state: FSMContext):
    await handle_info_update(message, state, "–≤—Ä–µ–º—è")


@dp.message(PromptStates.waiting_for_metro)
async def handle_metro(message: Message, state: FSMContext):
    await handle_info_update(message, state, "–º–µ—Ç—Ä–æ")


@dp.message(PromptStates.waiting_for_area)
async def handle_area(message: Message, state: FSMContext):
    await handle_info_update(message, state, "—Ä–∞–π–æ–Ω")


@dp.message(PromptStates.waiting_for_eat)
async def handle_eat(message: Message, state: FSMContext):
    await handle_info_update(message, state, "–≥–¥–µ –ø–æ–µ—Å—Ç—å")


# –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
async def finish_process(message: Message, state: FSMContext):
    user_data = await state.get_data()
    prompt_data = user_data["prompt_data"]
    rec_data = user_data["recomendation_cords"]
    cashed_cordinates = user_data["cashed_cordinates"]

    await message.answer("–°–ø–∞—Å–∏–±–æ, —è —Å–æ—Å—Ç–∞–≤–ª—è—é —Ç–µ–±–µ –º–∞—Ä—à—Ä—É—Ç, –ø–æ–¥–æ–∂–∏ –Ω–µ–º–Ω–æ–≥–æ)")
    print(f"\n{prompt_data}\n")


    start_point = prompt_data["–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞"]
    intermediate_points_show = prompt_data.get("–º–µ—Å—Ç–æ", "").split(";")
    end_point = prompt_data["–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞"]

    cashed_cordinates = ";".join(f"({lat}, {lon})" for lat, lon in cashed_cordinates)

    intermediate_points = str(cashed_cordinates + rec_data).split(";")

    points = (
        [f"–ù–∞—á–∞–ª—å–Ω–∞—è: {start_point}"]
        + [f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è: {point}" for point in intermediate_points]
        + [f"–ö–æ–Ω–µ—á–Ω–∞—è: {end_point}"]
    )

    point_show =(
        [f"–ù–∞—á–∞–ª—å–Ω–∞—è: {start_point}"]
        + [f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è: {point}" for point in intermediate_points_show]
        + [f"–ö–æ–Ω–µ—á–Ω–∞—è: {end_point}"]
    )


    await message.answer("–í–æ—Ç –≤–∞—à –º–∞—Ä—à—Ä—É—Ç: ")

    await message.answer("\n".join(point_show))
    await message.answer("–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–æ—á–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç!")
    link = get_good_route(
        generate_map_link([start_point] + intermediate_points + [end_point])
    )
    print(link)
    await message.answer(link)

    await state.clear()


@dp.message(Command("route_prompt"))
async def aboba(message: Message, state: FSMContext):
    await message.answer("–í–æ—Ç –≤–∞—à –º–∞—Ä—à—Ä—É—Ç: ")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    start_point = data.get("–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞")
    intermediate_points = data.get("–º–µ—Å—Ç–æ", [])
    end_point = data.get("–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    points = (
        [f"–ù–∞—á–∞–ª—å–Ω–∞—è: {start_point}"]
        + [f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è: {point}" for point in intermediate_points]
        + [f"–ö–æ–Ω–µ—á–Ω–∞—è: {end_point}"]
    )

    await message.answer("\n".join(points))

    points = [start_point] + intermediate_points + [end_point]
    link = get_good_route(generate_map_link(points))

    await message.answer(link)


@dp.message(Command("get_route"))
async def start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É:")
    await state.set_state(PointForm.start_point)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
@dp.message(PointForm.start_point)
async def enter_start_point(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
    await state.update_data(start_point=message.text)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–æ–ø'."
    )
    await state.set_state(PointForm.intermediate_points)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
@dp.message(PointForm.intermediate_points, F.text.lower() != "—Å—Ç–æ–ø")
async def enter_intermediate_points(message: Message, state: FSMContext):
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –≤ —Å–ø–∏—Å–æ–∫
    intermediate_points = data.get("intermediate_points", [])
    intermediate_points.append(message.text)
    await state.update_data(intermediate_points=intermediate_points)

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –µ—â—ë –æ–¥–Ω—É –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "–°—Ç–æ–ø"
@dp.message(PointForm.intermediate_points, F.text.lower() == "—Å—Ç–æ–ø")
async def stop_intermediate_points(message: Message, state: FSMContext):
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É:")
    await state.set_state(PointForm.end_point)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(PointForm.end_point)
async def enter_end_point(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
    await state.update_data(end_point=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    start_point = data.get("start_point")
    intermediate_points = data.get("intermediate_points", [])
    end_point = data.get("end_point")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    points = (
        [f"–ù–∞—á–∞–ª—å–Ω–∞—è: {start_point}"]
        + [f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è: {point}" for point in intermediate_points]
        + [f"–ö–æ–Ω–µ—á–Ω–∞—è: {end_point}"]
    )

    await message.answer("\n".join(points))

    points = [start_point] + intermediate_points + [end_point]
    link = get_good_route(generate_map_link(points))

    await message.answer(link)
    intermediate_points = None
    # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
